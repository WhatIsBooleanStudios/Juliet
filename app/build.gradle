/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
}

repositories {
	mavenCentral()
}

dependencies {
	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation 'net.onedaybeard.artemis:artemis-odb:2.3.0'
	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-assimp"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-openal"
	implementation "org.lwjgl:lwjgl-opengl"
	implementation "org.lwjgl:lwjgl-stb"
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.jetbrains:annotations:20.1.0'
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
	implementation "org.joml:joml:${jomlVersion}"
    implementation "io.github.spair:imgui-java-app:1.86.3"
}

application {
    // Define the main class for the application.
    mainClass = 'mclone.App'
	if (OperatingSystem.current() == OperatingSystem.MAC_OS)
    	applicationDefaultJvmArgs = ['-XstartOnFirstThread', '-javaagent:' + project.rootDir + '/debug-util/lwjglx-debug-1.0.0.jar'];
    else {
        applicationDefaultJvmArgs = ['-javaagent:' + project.rootDir + '/debug-util/lwjglx-debug-1.0.0.jar']
    }
}

task runDebug(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = application.getMainClass()
    jvmArgs = ['-javaagent:' + project.rootDir + '/debug-util/lwjglx-debug-1.0.0.jar']
    if(OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs('-XstartOnFirstThread')
    }
}

task runNDebug(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = application.getMainClass()
    if(OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs('-XstartOnFirstThread')
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

jar {
    manifest {
        attributes 'Main-Class': application.getMainClassName()
    }
}
